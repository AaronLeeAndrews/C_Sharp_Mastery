using C_Sharp_Practice.Problems;
using System;
using System.Collections.Generic;
using System.Text;

namespace C_Sharp_Practice
{
    interface IAddThing<A>
    {
        void AddThing(A a);
    }
    interface IGetThing<A> : IAddThing<A>
    {
        A GetThing(int idx);
    }

    class SampleClass<A> : IGetThing<A>, IAddThing<A>
    {
        private List<A> arrA;

        public void AddThing(A item)
        {
            arrA.Add(item);
        }
        public A GetThing(int idx)
        {
            if(arrA.Count == 0)
                return default(A);

            if (idx < arrA.Count)
                return arrA[idx];
            else
                return arrA[arrA.Count - 1];
        }
    }


    class Problem_3_0
    {
        public static void Problem_3_0_Main()
        {
            IGetThing<int> a = new SampleClass<int>();

            Console.WriteLine("Printing: " + a.GetThing(10));

            IGetThing<string> b = new SampleClass<string>();
            b.AddThing("test");
            Console.WriteLine("Printing: " + b.GetThing(10));
        }
    }
}
