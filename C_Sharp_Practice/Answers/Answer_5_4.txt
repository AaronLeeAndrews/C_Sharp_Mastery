using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;

/*
Struct cannot have a default constructor (a constructor without parameters) or a destructor.

Struct does not allow the instance field declarations to include variable initializers. But, static fields of a struct are allowed to include variable initializers.

Structs can't have protected, abstract, or virtual variables
*/

namespace C_Sharp_Practice
{
    struct StructSquare
    {
        int width;// = 0; // Struct variables can't be initialized with data on creation
        static int staticVariable = 0; // Unless they are static
        public string tag;
        
        //protected int protectedVariable; // Structs cannot be inherited, so the protected, abstract and virtual keywords aren't even allowed by the compiler
        //abstract int abstractVariable; // Structs cannot be inherited, so the protected, abstract and virtual keywords aren't even allowed by the compiler
        //virtual int virtualVariable; // Structs cannot be inherited, so the protected, abstract and virtual keywords aren't even allowed by the compiler

        //StructSquare strSqr; // Structs cannot contain a member of themselves

        //public StructSquare() { }; // Structs can't have default constructors, aka, constructors with no parameters

        //~StructSquare() { } // Structs cannot have destructors
        //~StructSquare(int x) { } // default or otherwise

        public StructSquare(int x) { width = x; tag = ""; } // Structs can have non-default constructors

        public void setWidth(int x)
        {
            width = x;
        }
        public int getWidth()
        {
            return width;
        }
    }

    class ClassSquare
    {
        int width = 0; // Class variables 
        static int staticVariable = 0;
        public string tag;
        protected int protectedVariable;

        ClassSquare clssSqr; // Classes can contain an instance of themselves

        public ClassSquare() { width = 0; } // Classes can have default constructors
        ~ClassSquare() { } // Classes can have destructors
        public void setWidth(int x)
        {
            width = x;
        }
        public int getWidth()
        {
            return width;
        }
    }

    class Problem_3_0
    {
        public static void Problem_3_0_Main()
        {
            StructSquare ss0 = new StructSquare(7);
            ss0.setWidth(7); // Calling a non-default constructor

            StructSquare ss1 = ss0; // Structs are value-types that can be copied on assignment
            Console.WriteLine("The width of ss1 is now " + ss1.getWidth());
            ss0.setWidth(100);
            Console.WriteLine("The width of ss0 was changed to 100, but the width of ss1 is still " + ss1.getWidth());

            StructSquare ss2;
            //ss2.getWidth(); // We can't call any fns
            ss2.tag = "ss2"; // We can assign public variables

            //BaseStruct ss3 = null; // A struct cannot be null

            ClassSquare cs0 = new ClassSquare();
            cs0.setWidth(7);
            ClassSquare cs1 = cs0; // Classes are reference types, but can still be copied on assignment
            Console.WriteLine("The width of cs1 is now " + cs1.getWidth());
            cs0.setWidth(100);
            Console.WriteLine("The width of cs0 was changed to 100, but now the width of cs1 is " + cs1.getWidth());

            ClassSquare cs2;
            //cs2.setWidth(7); // We can't call any fns
            //cs2.tag = "cs2"; // We can't assign even public variables

            ClassSquare css3 = null; // A class can be null
        }
    }
}
