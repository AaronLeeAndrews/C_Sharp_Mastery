using System;

namespace C_Sharp_Practice.Problems
{
    /*
     * In c#, polymorphism provides an ability for the classes to implement different methods that are called through the same name 
     * and it also provides an ability to invoke the methods of a derived class through base class reference during runtime based on our requirements.
     */

    /*
     * In c#, RunTime Polymorphism means overriding a base class method with a method in the child class. 
     * This is done by using the override and virtual keywords.
     */

    class X
    {
        protected virtual void F() { Console.WriteLine("X.F"); }
        protected virtual void F2() { Console.WriteLine("X.F2"); }
    }
    class Y : X
    {
        protected virtual void F() { Console.WriteLine("X.F"); }
        protected virtual void F2() { Console.WriteLine("X.F2"); }
    }


    class Problem_2_0
    {
        // Sort an array in descending order
        public static void Problem_2_0_Main()
        {
            Console.WriteLine("");
        }
    }
}
