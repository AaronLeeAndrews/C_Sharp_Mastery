using System;
using System.Security.Cryptography;

// array:     System
// ArrayList: System.Collections


namespace C_Sharp_Practice
{
    interface ISoldier
    {
        public static void confirmOrders(string direction, string destination)
        {
            Console.WriteLine("I go " + direction + " to " + destination + ".");
        }
    }
    interface IUndead
    {
        public static int takeDamage(int amount, string type)
        {
            if (type == "negative")
            {
                Console.WriteLine("Healed for " + amount);
                return amount;
            }
            else
            {
                Console.WriteLine("Damaged for " + amount);
                return -amount;
            }
        }
    }

    class SkeletonWarrior : ISoldier, IUndead
    {
        int m_health;
        int m_healthMax;

        public SkeletonWarrior(int maxHealth)
        {
            m_health = m_healthMax = maxHealth;

        }

        public void confirmOrders(string direction, string destination)
        {
            ISoldier.confirmOrders(direction, destination);
        }

        public void takeDamage(int amount, string type)
        {
            m_health += IUndead.takeDamage(amount, type);
            m_health = Math.Clamp(m_health, 0, m_healthMax);
        }

        public int getHealth() { return m_health; }
    }

    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            SkeletonWarrior sw = new SkeletonWarrior(7);

            sw.confirmOrders("South", "LegoLand");
            Console.WriteLine("Health is at " + sw.getHealth());
            sw.takeDamage(3, "holy");
            Console.WriteLine("Health is at " + sw.getHealth());
            sw.takeDamage(10, "negative");
            Console.WriteLine("Health is at " + sw.getHealth());
        }
    }
}
