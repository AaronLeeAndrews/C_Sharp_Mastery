using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Threading;

namespace C_Sharp_Practice
{
    /*
    For a tree:

        A
       / \
      B   C
     /     
    D       

    Print every valid list, such that a node cannot appear before its children in the list, but each child can appear before their uncles

    So:
    [D, C, B, A]
    [D, B, C, A]
    [C, D, B, A]
    
    
    For a tree:

        A
       / \
      B   C
     /     \
    D       E
    
    [E, D, C, B, A]
    [D, E, C, B, A]
    [E, C, D, B, A]
    [E, D, B, C, A]
    [D, E, B, C, A]
    [D, B, E, C, A]
    */

    class Node
    {
        public char value;
        public int itr = 0;
        public List<Node> childList = new List<Node>();

        public Node(char c) { value = c; }
    }

    class Practice_Problem
    {
        public static List<Node> getList(Node n)
        {
            List<Node> myList = new List<Node>();
            myList.Add(n);
            int itr = 0;

            while(itr < myList.Count)
            {

                for(int ii=0; ii < myList[itr].childList.Count; ++ii)
                {
                    myList.Add(myList[itr].childList[ii]);
                }
                ++itr;
            }

            myList.Reverse();
            return myList;
        }

        public static List<List<Node>> createListOfLists(List<Node> list, List<Node> options, Node n)
        {
            List<List<Node>> finalLists = new List<List<Node>>();
            foreach (Node c in n.childList)
                options.Add(c);
            options.Remove(n);
            list.Add(n);

            if (options.Count == 0)
            {
                finalLists.Add(list);
                return finalLists;
            }
            
            for(int ii=0; ii<options.Count; ++ii)
            {
                List<List<Node>> theseLists = createListOfLists(new List<Node>(list), new List<Node>(options), options[ii]);
                foreach (List<Node> l in theseLists)
                    finalLists.Add(l);
            }

            return finalLists;
        }

        public static List<List<Node>> getListOfLists(Node n)
        {
            List<Node> list = new List<Node>() { n };
            return createListOfLists(new List<Node>(), list, n);
        }

        public static void Practice_Problem_Main()
        {
            Node D = new Node('D');
            Node B = new Node('B');
            B.childList.Add(D);
            Node E = new Node('E');
            Node C = new Node('C');
            C.childList.Add(E);
            Node A = new Node('A');
            A.childList.Add(B);
            A.childList.Add(C);

            //List<Node> myList = getList(A);

            List<List<Node>> finalLists = getListOfLists(A);

            foreach (List<Node> l in finalLists)
            {
                foreach (Node n in l)
                {
                    Console.Write(n.value + ", ");
                }
                Console.WriteLine();
            }
        }
    }
}
