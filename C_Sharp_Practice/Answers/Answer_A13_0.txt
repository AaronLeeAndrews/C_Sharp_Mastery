

    // Abstract Factory Pattern is a Creational Pattern
    // It abstracts the factory that the customer needs to call, making it able to deliver different product variants
    // based on who the customer is and what they require
    // So here we are just using the AbstractFactory class,
    // which is then responsible for calling the creation members in the specific Embla and Enginola classes

    // https://sourcemaking.com/design_patterns/abstract_factory/java/1

    abstract class CPU { }

    class EmberCPU : CPU { }
    class EnginolaCPU : CPU { }

    abstract class MMU { }

    class EmberMMU : MMU {}
    class EnginolaMMU : MMU { }

    class EmberToolkit : AbstractFactory
    {
        public override CPU CreateCPU()
        {
            Console.WriteLine("Creating an Ember CPU");
            return new EmberCPU();
        }
        public override MMU CreateMMU()
        {
            Console.WriteLine("Creating an Ember MMU");
            return new EmberMMU();
        }
    }

    class EnginolaToolkit : AbstractFactory
    {
        public override CPU CreateCPU()
        {
            Console.WriteLine("Creating an Enginola CPU");
            return new EnginolaCPU();
        }
        public override MMU CreateMMU()
        {
            Console.WriteLine("Creating an Enginola MMU");
            return new EnginolaMMU();
        }
    }

    enum ARCHITECTURE { EMBER, ENGINOLA}

    abstract class AbstractFactory
    {
        private static EmberToolkit EMBER_TOOLKIT = new EmberToolkit();
        private static EnginolaToolkit ENGINOLA_TOOLKIT = new EnginolaToolkit();

        public static AbstractFactory getFactory(ARCHITECTURE architecture)
        {
            AbstractFactory factory = null;
            switch (architecture)
            {
                case ARCHITECTURE.ENGINOLA:
                    factory = ENGINOLA_TOOLKIT;
                    break;
                case ARCHITECTURE.EMBER:
                    factory = EMBER_TOOLKIT;
                    break;
            }
            return factory;
        }

        public abstract CPU CreateCPU();
        public abstract MMU CreateMMU();
    }
    
    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            AbstractFactory abFac = AbstractFactory.getFactory(ARCHITECTURE.EMBER);
            CPU cpu = abFac.CreateCPU();
        }
    }