Abstraction allows making relevant information visible and encapsulation enables a programmer to implement the desired level of abstraction.

Abstraction can be achieved using abstract classes in C#. 
C# allows you to create abstract classes that are used to provide a partial class implementation of an interface. 
Implementation is completed when a derived class inherits from it. Abstract classes contain abstract methods, which are implemented by the derived class. 
The derived classes have more specialized functionality.

The following are some of the key points:

You cannot create an instance of an abstract class
You cannot declare an abstract method outside an abstract class
When a class is declared sealed, it cannot be inherited, abstract classes cannot be declared sealed.

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;

namespace C_Sharp_Practice
{
    abstract class Base
    {
        public static void foo()
        {
            Console.WriteLine("Base class foo");
        }
        public void dyn_foo()
        {
            Console.WriteLine("Base class foo");
        }
    }

    class Deriv : Base
    {
        public new static void foo() // The new keyword lets the compiler know that we are overriding the base class fn
        {
            Console.WriteLine("Deriv class foo");
        }
        public new void dyn_foo()
        {
            Console.WriteLine("Deriv class foo");
        }
    }

    class Problem_3_0
    {
        public static void Problem_3_0_Main()
        {
            // Base b = new Base(); // Illegal b/c it is an abstract class, so we can't create a direct instance

            Base b = new Deriv(); // We are able to create a base class through the derived class

            b.dyn_foo(); // We are then able to call the Base class fn

            Base.foo(); // We are also able to call the static fn using the Base class
        }
    }
}
