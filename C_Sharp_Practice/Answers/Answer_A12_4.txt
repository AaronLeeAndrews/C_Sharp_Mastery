using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Threading;

namespace C_Sharp_Practice
{

    //https://tyrrrz.me/blog/fluent-generics
    // https://tyrrrz.me/blog/return-type-inference
    public static class DictionaryCreation
    {
        public static class WithKeyType<KeyType>
        {
            public static class WithValueType<ValType>
            {
                public static Dictionary<KeyType, ValType> GetDictionary()
                {
                    return new Dictionary<KeyType, ValType>();
                }
            }
            public static class WithoutValueType
            {
                public static Dictionary<KeyType, string> GetDictionary()
                {
                    return new Dictionary<KeyType, string>();
                }
            }
        }

        public abstract class WithoutKeyType
        {
            public static class WithValueType<ValType>
            {
                public static Dictionary<string, ValType> GetDictionary()
                {
                    return new Dictionary<string, ValType>();
                }
            }
            public static class WithoutValueType
            {
                public static Dictionary<string, string> GetDictionary()
                {
                    return new Dictionary<string, string>();
                }
            }
        }
    }

    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            Dictionary<double, double> WithKeyWithVal = DictionaryCreation.WithKeyType<double>.WithValueType<double>.GetDictionary();
            Dictionary<double, string> WithKeyWithoutVal = DictionaryCreation.WithKeyType<double>.WithoutValueType.GetDictionary();
            Dictionary<string, double> WithoutKeyWithVal = DictionaryCreation.WithoutKeyType.WithValueType<double>.GetDictionary();
            Dictionary<string, string> WithoutKeyWithoutVal = DictionaryCreation.WithoutKeyType.WithoutValueType.GetDictionary();
        }
    }
}
