using System;
using System.Collections.Generic;
using System.Text;

// The basics of using Delegates is that we define a function input and output, and then we are able to use that as the placeholder for sending functions as data.
// Here, we have a global delegate and a local delegate (local to Executor), which Executor uses as a placeholder for fns passed to it from Inciter

namespace C_Sharp_Practice
{
    delegate void globalDelegate(string str);

    class Inciter
    {
        static int value = 7;
        public static void SendToDelegate(string str)
        {
            Console.WriteLine("Function was passed with "+str+", called, and value is " + value);
        }
        public static string MessageAlteration(string str)
        {
            char[] arr = str.ToCharArray();
            Array.Reverse(arr);

            return new string(arr);
        }
    }
    class Executor
    {
        public delegate string AlterMessage(string str);

        public static void ExecuteDelegates(globalDelegate globeDel, AlterMessage alterMessage)
        {
            globeDel.Invoke("some message");

            Console.WriteLine(alterMessage.Invoke("Standard message"));
        }
    }

    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            Executor.ExecuteDelegates(Inciter.SendToDelegate, Inciter.MessageAlteration);
        }
    }
}
