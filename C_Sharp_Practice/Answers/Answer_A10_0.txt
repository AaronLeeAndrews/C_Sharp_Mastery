
//////////////////////////////////////////////////////////////////////////////////////////////////////////
Aggregate
//////////////////////////////////////////////////////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Collections;

namespace C_Sharp_Practice
{

    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            string[] fruits = new string[] { "banana", "passionfruit", "lemon" };

            string longestName0 =
                fruits.Aggregate("", // This is the seed, but does still get considered
                (longest, next) => next.Length > longest.Length ? next : longest, // The comparison fn
                fruit => fruit.ToUpper()); // Any fn we want to throw in

            Console.WriteLine("Longest string is {1}", "blank", longestName0);

            string longestName1 =
                fruits.Aggregate("This seed is way too long", // This is the seed, but does still get considered
                (longest, next) => next.Length > longest.Length ? next : longest,
                fruit => fruit.ToUpper());

            Console.WriteLine("Longest string is {0}", longestName1);

            string longestName2 =
                fruits.Aggregate("",
                (longest, next) => next.Length > longest.Length ? next : longest,
                fruit => fruit.ToUpper().Substring(0, 3));

            Console.WriteLine("Longest string is {0}", longestName2);

            string longestName3 =
                fruits.Aggregate("",
                (longest, next) => next.Length > longest.Length ? next : longest,
                fruit => fruit);

            Console.WriteLine("Longest string is "+ longestName3);
        }
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////
Average
//////////////////////////////////////////////////////////////////////////////////////////////////////////


return list.Where(x => x > 7).Average();


//////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////
Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
//////////////////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Linq;
using System.Collections;


namespace C_Sharp_Practice
{
    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            List<Int32?> i32N = new List<Int32?>();

            i32N.Add(null);
            i32N.Add(null);
            i32N.Add(3);
            i32N.Add(null);
            i32N.Add(2);
            i32N.Add(null);
            i32N.Add(1);

            Console.WriteLine(i32N.Average());
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
Count
//////////////////////////////////////////////////////////////////////////////////////////////////////////


        public static void Practice_Problem_Main()
        {
            List<int> arr = new List<int>();
            for(int ii=0; ii<7; ++ii)
            {
                arr.Add(6 - ii);
            }

            int q = (from i in arr
                     where i <= 4
                     select i).Count();

            int iq = arr.Count(i => i > 4);

            Console.WriteLine(q);
            Console.WriteLine(iq);
        }


//////////////////////////////////////////////////////////////////////////////////////////////////////////

GroupBy
//////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Collections;

namespace C_Sharp_Practice
{
    struct S
    {
        public int val;
        public string tag;

        public S(int i, string s)
        {
            val = i;
            tag = s;
        }
    }
    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            List<S> sList = new List<S>() 
            { 
                new S(7, "A"),
                new S(2, "D"),
                new S(7, "B"),
                new S(2, "E"),
                new S(4, "F"),
                new S(7, "C"),
            };

            var q = sList.GroupBy(v => v.val, (key, keys) => new { Key = key, Count = keys.Count()});

            foreach(var i in q)
            {
                Console.WriteLine(i.Key +": "+i.Count);
            }
        }
    }
}


/////////////////////////////////////////////////////////////////////////////////
Max
/////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Collections;

namespace C_Sharp_Practice
{
    struct S
    {
        public int value;
        public S(int v)
        {
            value = v;
        }
    }
    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            List<S> a = new List<S>() {new S(1), new S(8), new S(2), new S(9), new S(10), new S(3), new S(5), new S(6) };

            var q = a.Max();

            Console.WriteLine(q.ToString());
        }
    }
}

/////////////////////////////////////////////////////////////////////////////////
Min
/////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Collections;

namespace C_Sharp_Practice
{
    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            List<int> l = new List<int>() { 5, 6, 7, 2, 3, 4, 5, 6, 7 };

            Console.WriteLine(l.Min());
        }
    }
}


/////////////////////////////////////////////////////////////////////////////////
Order By
/////////////////////////////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;

/*
Use the System.Linq to use the library
There are two main classes, Enumerable, and Queryable
Enumerable is the one that works with the in-memory collections like List, Dictionary, Hash-Map, SortedList, HashSet, and so on.
Queryable is a static class that includes extensions methods for classes that implement the IQueryable interface.
I believe that this means, that a class is a Queryable class if it inherits the IQueryable interface, and therefore must create the required methods as well.
*/

namespace C_Sharp_Practice
{
    class Pet
    {
        public string Name { get; set; }
        public int Age { get; set; }
    }

    public static void OrderByEx1()
    {
        Pet[] pets = { new Pet { Name="Barley", Age=8 },
                       new Pet { Name="Boots", Age=4 },
                       new Pet { Name="Whiskers", Age=1 } };

        IEnumerable<Pet> query = pets.OrderBy(pet => pet.Age);

        foreach (Pet pet in query)
        {
            Console.WriteLine("{0} - {1}", pet.Name, pet.Age);
        }
    }

    /*
     This code produces the following output:

     Whiskers - 1
     Boots - 4
     Barley - 8
    */

    class Problem_3_0
    {
        public static void Problem_3_0_Main()
        {
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////
RANGE
//////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace C_Sharp_Practice
{

    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            int[] r = Enumerable.Range(0, 70).ToArray();

            foreach(int i in r)
            {
                Console.Write(i + ", ");
            }

            Range R = new Range(0, 70);
            Console.WriteLine(R);
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////
SELECT
//////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace C_Sharp_Practice
{
    class Practice_Problem
    {
        public static int GreaterThanTwo(int x)
        {
            if (x > 2)
                return x;
            else 
                return 0;
        }

        public static void Practice_Problem_Main()
        {
            List<int> iL = new List<int>() { 1, 1, 2, 2, 3, 3, 4, 4, 7 };

            var q = iL.Select(x => GreaterThanTwo(x));

            foreach(int b in q)
            {
                Console.WriteLine(b);
            }

            IEnumerable iE = iL.Select(x => x > 5); // Gives bools

            foreach (var i in iE)
            {
                Console.WriteLine(i);
            }

            iE = iL.Select(x => x + 5); // Gives modified ints

            foreach (int i in iE)
            {
                Console.WriteLine(i);
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////
TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
//////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Threading;
using C_Sharp_Practice;

namespace C_Sharp_Practice
{

    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            List<int> iList = new List<int>()
            {
                1, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9
            };

            var q = iList.TakeWhile((i, index) => i > index );

            foreach(int i in q)
            {
                Console.WriteLine(i);
            }
        }
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////
Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
//////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using System.Threading;
using C_Sharp_Practice;

namespace C_Sharp_Practice
{
    public class Product
    {
        public string Name { get; set; }
        public int Code { get; set; }
    }

    // Custom comparer for the Product class
    class ProductComparer : IEqualityComparer<Product>
    {
        // Products are equal if their names and product numbers are equal.
        public bool Equals(Product x, Product y)
        {

            //Check whether the compared objects reference the same data.
            if (Object.ReferenceEquals(x, y)) return true;

            //Check whether any of the compared objects is null.
            if (Object.ReferenceEquals(x, null) || Object.ReferenceEquals(y, null))
                return false;

            //Check whether the products' properties are equal.
            return x.Code == y.Code && x.Name == y.Name;
        }

        // If Equals() returns true for a pair of objects
        // then GetHashCode() must return the same value for these objects.

        public int GetHashCode(Product product)
        {
            //Check whether the object is null
            if (Object.ReferenceEquals(product, null)) return 0;

            //Get hash code for the Name field if it is not null.
            int hashProductName = product.Name == null ? 0 : product.Name.GetHashCode();

            //Get hash code for the Code field.
            int hashProductCode = product.Code.GetHashCode();

            //Calculate the hash code for the product.
            return hashProductName ^ hashProductCode;
        }
    }

    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            Product[] store1 = { new Product { Name = "apple", Code = 9 },
                       new Product { Name = "orange", Code = 4 } };

            Product[] store2 = { new Product { Name = "apple", Code = 9 },
                       new Product { Name = "lemon", Code = 12 } };

            //Get the products from the both arrays
            //excluding duplicates.

            IEnumerable<Product> union =
              store1.Union(store2, new ProductComparer());

            foreach (var product in union)
                Console.WriteLine(product.Name + " " + product.Code);

            /*
                This code produces the following output:

                apple 9
                orange 4
                lemon 12
            */
        }
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////
Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
//////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Linq;
using System.Collections;


namespace C_Sharp_Practice
{

    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            List<int> iList = new List<int>() {7, 2, 1, 0, -1, 5, 4, 2};


            var q = from i in iList
                    where i > 2
                    select i;

            foreach(int e in q){
                Console.WriteLine(e);
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////