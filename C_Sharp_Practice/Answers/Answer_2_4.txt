using System;

// https://www.tutlane.com/tutorial/csharp/csharp-polymorphism#:~:text=By%20using%20run%2Dtime%20polymorphism,late%20binding%20or%20dynamic%20binding.

namespace C_Sharp_Practice.Problems
{
    /*
     * In c#, polymorphism provides an ability for the classes to implement different methods that are called through the same name 
     * and it also provides an ability to invoke the methods of a derived class through base class reference during runtime based on our requirements.
     */

    /*
     * In c#, Compile Time Polymorphism means defining multiple methods with the same name but with different parameters. 
     * By using compile-time polymorphism, we can perform different tasks with the same method name by passing different parameters.
     *
     * In c#, RunTime Polymorphism means overriding a base class method with a method in the child class. 
     * This is done by using the override and virtual keywords.
     */
     
    class XX
    {
        public virtual void foo()
        {
            Console.WriteLine("Fn foo from class XX");
        }
    }

    class YY: XX
    {
        public override void foo()
        {
            Console.WriteLine("Fn foo from class YY");
        }

        public static void printNumber(int x)
        {
            Console.WriteLine("printing "+x + " from int");
        }

        public static void printNumber(String x)
        {
            Console.WriteLine("printing "+x+" from String");
        }
    }

    class Problem_4_to_8
    {
        public static void Problem_4_to_8_Main()
        {
            YY yy = new YY();
            yy.foo();
            YY.printNumber(7777);
            YY.printNumber("7777");
        }
    }
}