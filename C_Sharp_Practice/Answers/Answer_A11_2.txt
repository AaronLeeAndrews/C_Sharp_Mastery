using System;
using System.Collections.Generic;
using System.Text;

// The basics of using Delegates is that we define a function input and output, and then we are able to use that as the placeholder for sending functions as data.
// Here, we have two fns in Inciter that are sent as data to Executor, which uses Action as an inline delegate so it doesn't have to define one.

namespace C_Sharp_Practice
{
    class Inciter
    {
        public static void MouseOut(string str)
        {
            MessageToUser.ExecuteDelegates(str, str =>
                                        {
                                            char[] mouseOutArr = str.ToCharArray();
                                            for (int ii = 0; ii < str.Length; ++ii)
                                                if (str[ii] != ' ')
                                                    mouseOutArr[ii] = '*';
                                                else
                                                    mouseOutArr[ii] = '-';
                                            Console.WriteLine(mouseOutArr);
                                        }
            );
        }
        public static void PrinterOut(string str)
        {
            MessageToUser.ExecuteDelegates(str, str =>
                                            {
                                                for (int ii = 0; ii < str.Length + 4; ++ii)
                                                    Console.Write("/");
                                                Console.WriteLine();
                                                Console.WriteLine("//" + str + "//");
                                                for (int ii = 0; ii < str.Length + 4; ++ii)
                                                    Console.Write("/");
                                                Console.WriteLine();
                                            }
            );
        }
    }
    class MessageToUser
    {
        public static int messageMaxLegth = 7;

        public static void ExecuteDelegates(string message, Action<string> messageOut)
        {
            if (message.Length > messageMaxLegth)
                message = message.Substring(0, messageMaxLegth);

            messageOut.Invoke(message);
        }
    }

    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            Inciter.PrinterOut("Flock Flock Flock");
            Inciter.MouseOut("Flock Flock Flock");

            MessageToUser.messageMaxLegth = 12;

            Inciter.PrinterOut("Flock Flock Flock");
            Inciter.MouseOut("Flock Flock Flock");
        }
    }
}
