using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Linq;
using System.Collections;

// 8.0

/*
Use the System.Linq to use the library
There are two main classes, Enumerable, and Queryable
Enumerable is the one that works with the in-memory collections like List, Dictionary, Hash-Map, SortedList, HashSet, and so on.
Queryable is a static class that includes extensions methods for classes that implement the IQueryable interface.
I believe that this means, that a class is a Queryable class if it inherits the IQueryable interface, and therefore must create the required methods as well.
*/

namespace C_Sharp_Practice
{
    class Weapon
    {
        public enum WEAPON_TYPE {AXE, SWORD, SPEAR};

        public WEAPON_TYPE type;
        public string name;

        public Weapon(WEAPON_TYPE t, string n)
        {
            type = t;
            name = n;
        }

        public override string ToString()
        {
            return "The " + type.ToString() + ", " + name;
        }
    }

    class Practice_Problem
    {
        public static void Practice_Problem_Main()
        {
            List<Weapon> weaponRack = new List<Weapon>()
            {
                new Weapon(Weapon.WEAPON_TYPE.SWORD, "Silver Sword"),
                new Weapon(Weapon.WEAPON_TYPE.AXE, "Wooden Axe"),
                new Weapon(Weapon.WEAPON_TYPE.SWORD, "Sting"),
                new Weapon(Weapon.WEAPON_TYPE.SPEAR, "Lifestealer"),
                new Weapon(Weapon.WEAPON_TYPE.AXE, "Grim"),
            };

            var q = weaponRack.OrderBy(x => x.type);

            foreach(var w in q)
            {
                Console.WriteLine(w.ToString());
            }
        }
    }
}
