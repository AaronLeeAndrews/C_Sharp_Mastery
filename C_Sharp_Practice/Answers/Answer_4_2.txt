using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;

// In C++ there are also abstract classes, but these are defined by containing at least one pure virtual fn, and have to have a deriving class instantiate

// In C#, the abstract class is defined by the "abstract" keyword, and also needs to be derived by another class

namespace C_Sharp_Practice
{
    abstract class Undead
    {
        public abstract void foo_abstract();
        public void foo_normal()
        {
            Console.WriteLine("Undead foo_normal");
        }
        public void foo_second()
        {
            Console.WriteLine("Undead foo_second");
        }
    }

    class Skeleton : Undead
    {
        public override void foo_abstract() // The override keyword lets the compiler know that we are overriding the base class' abstract fn
        {
            Console.WriteLine("I am the foo_abstract scary skelly");
        }
        public new void foo_normal() // The new keyword lets the compiler know that we are overriding the base class' fn
        {
            Console.WriteLine("I am the foo_normal scary skelly");
        }
    }

    class Problem_3_0
    {
        public static void Problem_3_0_Main()
        {
            Skeleton s = new Skeleton();
            s.foo_abstract();

            s.foo_normal();

            s.foo_second();
        }
    }
}
